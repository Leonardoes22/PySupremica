# Basic scripting testground

from py_supremica import *

#######################
mod = Module("My new Module")

mod.addConstant("H",1)
mod.addVariable("x","x==0",[0,"H"])
mod.addVariable("y","y==0",[0,4])


ga = Alphabet()
aut = Automaton()

aut.addState("S1",initial=True)
aut.addState("S2",accepting=True)

aut.addEdge("S1","S2",ga.newEvent("a"))
aut.addEdge("S1","S1",ga.newEvent("b"))
aut.addEventToEdge("S1","S2",ga.newEvent("c"))
aut.setEdgeGuard("S1", "S2", "x>5 & x<9")
aut.setEdgeGuard("S1", "S1", "(y>5 & y<9) & (x>0 & x<50)")
#aut.setEdgeActions("S1", "S2", "x+=2;y-=x")

aut.addTransition("S1","S2",ga.newEvent("HOHJO"))

mod.automata["Aut"] = aut
mod.alphabet = ga
mod.comment = "This is a module from PySupremica"

mod.toWMOD("gen/DoubleEDGE")

##############################
#    Variable Sized Buffer   
##############################

if False:
    bufferLimit = 30 # Python variable indicating desired buffer size

    bufferMod = Module("Buffer Module") # Initialize a new module
    alph = Alphabet() # Initialize a new alphabet for the events to live
    bufferAut = Automaton() # Initialize the buffer automaton

    # Create fill and remove events
    e_a = alph.newEvent("a","CONTROLLABLE")
    e_b = alph.newEvent("b","UNCONTROLLABLE")

    # Generate automaton
    for i in range(bufferLimit+1):

        state = bufferAut.addState("Q"+ str(i)) # Add the ith state
        
        if(i == 0): # If its the empty buffer state, set as initial and final
            state.initial = True
            state.accepting = True
        else: # Else, create backwards and forwards transitions
            bufferAut.addEdge(bufferAut.states[i-1].name,bufferAut.states[i].name, e_a)
            bufferAut.addEdge(bufferAut.states[i].name,bufferAut.states[i-1].name, e_b)


    bufferMod.automata["Buffer"] = bufferAut # Add the buffer automaton to the buffer module
    bufferMod.alphabet = alph # Add the alphabet to the buffer module
    bufferMod.comment = "This a Supremica module generated by PySupremica" # Additional comment

    bufferMod.toWMOD("gen/buffer" + str(bufferLimit)) # Generate WMOD file




